:struct val IPAddress
  :let _v6_raw_hi U64
  :let _v6_raw_lo U64

  // This field indicates whether the address is IPv4 or IPv6, and also
  // indicates the number of leading significant bits (i.e. a CIDR mask).
  //
  // For IPv6, this is in the 0 to -128 range, indicating 0 to 128 CIDR bits.
  :let _bits I8

  :fun is_v6: @_bits <= 0
  :fun is_v4: @_bits > 0

  :fun _v6_cidr_bits U8: if @_bits == -128 (128 | @_bits.negate.u8)
  :fun _v4_cidr_bits U8: @_bits.u8.bit_shr(8).bit_and(0x3F)

  // For IPv4, the raw bytes are kept in the low 32 bits of the IPv6 raw bytes.
  // Here we define a getter and setter function to let us access them easily.
  :fun _v4_raw: @_v6_raw_lo.u32

  :new val new_v4_raw(v4_raw U32): @_v6_raw_hi = 0, @_v6_raw_lo = v4_raw.u64, @_bits = 96
  :new val new_v6_raw(@_v6_raw_hi, @_v6_raw_lo): @_bits = -128

  :fun non v4_zero: @new_v4_raw(0)
  :fun non v6_zero: @new_v6_raw(0, 0)

  :fun val with_port_number(port_number)
    IPAddress.WithPortNumber.new(@, port_number)

  :fun _v4_each_u8
    raw = @_v4_raw
    yield raw.bit_shr(24).u8
    yield raw.bit_shr(16).u8
    yield raw.bit_shr(8).u8
    yield raw.u8
    @

  :fun _v6_each_u16
    raw_hi = @_v6_raw_hi
    raw_lo = @_v6_raw_lo
    yield raw_hi.bit_shr(48).u16
    yield raw_hi.bit_shr(32).u16
    yield raw_hi.bit_shr(16).u16
    yield raw_hi.u16
    yield raw_lo.bit_shr(48).u16
    yield raw_lo.bit_shr(32).u16
    yield raw_lo.bit_shr(16).u16
    yield raw_lo.u16
    @

  :fun format: IPAddress.Format.new(@)

  :is IntoString
  :fun into_string(out): @format.into_string(out)
  :fun into_string_space: @format.into_string_space
